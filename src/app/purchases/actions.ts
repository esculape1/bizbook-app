
'use server';

import { z } from 'zod';
import { db } from '@/lib/firebase-admin';
import { FieldValue } from 'firebase-admin/firestore';
import {
  addPurchase,
  getSuppliers,
  getProducts,
  updatePurchase as updatePurchaseInDB,
  getPurchaseById,
  updateProduct,
} from '@/lib/data';
import { revalidatePath } from 'next/cache';
import type { PurchaseItem, Purchase, Product } from '@/lib/types';
import { getSession } from '@/lib/session';

const purchaseItemSchema = z.object({
  productId: z.string().min(1, "Produit requis"),
  productName: z.string(),
  reference: z.string(),
  quantity: z.coerce.number().min(1, "Qté > 0"),
});

const purchaseSchema = z.object({
  supplierId: z.string().min(1, "Fournisseur requis"),
  date: z.date({ required_error: "Date requise" }),
  items: z.array(purchaseItemSchema).min(1, "Ajoutez au moins un produit."),
  premierVersement: z.coerce.number().min(0).default(0),
  deuxiemeVersement: z.coerce.number().min(0).default(0),
  transportCost: z.coerce.number().min(0).default(0),
  otherFees: z.coerce.number().min(0).default(0),
});

const updatePurchaseSchema = purchaseSchema.extend({
  status: z.enum(['Pending', 'Received', 'Cancelled']),
});

export async function createPurchase(formData: unknown) {
  const session = await getSession();
  if (session?.role !== 'Admin' && session?.role !== 'SuperAdmin') {
    return { message: "Action non autorisée." };
  }

  const validatedFields = purchaseSchema.safeParse(formData);
  if (!validatedFields.success) {
    return { message: 'Champs invalides. Impossible de créer l\'achat.' };
  }

  try {
    const { supplierId, date, items, transportCost, otherFees, premierVersement, deuxiemeVersement } = validatedFields.data;
    
    const suppliers = await getSuppliers();
    const products = await getProducts();

    const supplier = suppliers.find(s => s.id === supplierId);
    if (!supplier) {
      return { message: 'Fournisseur non trouvé.' };
    }
    
    const purchaseItems: PurchaseItem[] = items.map(item => {
      const product = products.find(p => p.id === item.productId);
      if (!product) throw new Error(`Produit non trouvé: ${item.productId}`);
      return {
        productId: item.productId,
        productName: product.name,
        reference: product.reference,
        quantity: item.quantity,
      };
    });

    const totalAmount = premierVersement + deuxiemeVersement + transportCost + otherFees;

    const newPurchaseData: Omit<Purchase, 'id'> = {
        purchaseNumber: '', // Will be generated by addPurchase
        supplierId,
        supplierName: supplier.name,
        date: date.toISOString(),
        items: purchaseItems,
        premierVersement,
        deuxiemeVersement,
        transportCost,
        otherFees,
        totalAmount,
        status: 'Pending',
    };
    
    await addPurchase(newPurchaseData);

    revalidatePath('/purchases');
    revalidatePath('/products');
    return {};
  } catch (error) {
    console.error('Failed to create purchase:', error);
    const message = error instanceof Error ? error.message : 'Erreur DB: Impossible de créer l\'achat.';
    return { message };
  }
}

export async function updatePurchase(id: string, purchaseNumber: string, formData: unknown) {
  const session = await getSession();
  if (session?.role !== 'Admin' && session?.role !== 'SuperAdmin') {
    return { message: "Action non autorisée." };
  }

  const validatedFields = updatePurchaseSchema.safeParse(formData);

  if (!validatedFields.success) {
    console.log(validatedFields.error.flatten().fieldErrors);
    return { message: 'Champs invalides. Impossible de mettre à jour l\'achat.' };
  }
  
  if (!db) {
    throw new Error("La connexion à la base de données a échoué.");
  }
  
  const firestore = db;

  try {
    const { supplierId, date, items, status, premierVersement, deuxiemeVersement, transportCost, otherFees } = validatedFields.data;
    
    const [originalPurchase, suppliers, allProducts] = await Promise.all([
      getPurchaseById(id),
      getSuppliers(),
      getProducts()
    ]);
    
    if (!originalPurchase) {
      return { message: 'Achat original non trouvé.' };
    }

    const supplier = suppliers.find(c => c.id === supplierId);
    if (!supplier) {
      return { message: 'Fournisseur non trouvé.' };
    }

    const wasReceived = originalPurchase.status === 'Received';
    const isNowReceived = status === 'Received';
    
    const purchaseItems: PurchaseItem[] = items.map(item => {
      const product = allProducts.find(p => p.id === item.productId);
      if (!product) throw new Error(`Produit non trouvé: ${item.productId}`);
      return {
        productId: item.productId,
        productName: product.name,
        reference: product.reference,
        quantity: item.quantity,
      };
    });
    const totalAmount = premierVersement + deuxiemeVersement + transportCost + otherFees;

    const purchaseUpdateData: Partial<Omit<Purchase, 'id'>> = {
      purchaseNumber,
      supplierId,
      supplierName: supplier.name,
      date: date.toISOString(),
      items: purchaseItems,
      premierVersement,
      deuxiemeVersement,
      transportCost,
      otherFees,
      totalAmount,
      status,
    };
    
    await firestore.runTransaction(async (transaction) => {
      const purchaseRef = firestore.collection('purchases').doc(id);
      transaction.update(purchaseRef, purchaseUpdateData);

      const handleStockUpdate = (item: PurchaseItem, operation: 'add' | 'subtract') => {
          const productRef = firestore.collection('products').doc(item.productId);
          const increment = operation === 'add' ? item.quantity : -item.quantity;
          transaction.update(productRef, { 
            quantityInStock: FieldValue.increment(increment)
          });
      };
      
      const handlePriceUpdate = (item: PurchaseItem, product: Product) => {
          const productRef = firestore.collection('products').doc(item.productId);
          
          // Cost for all items in this specific purchase
          const totalItemsInPurchase = items.reduce((sum, i) => sum + i.quantity, 0);
          if (totalItemsInPurchase === 0) return; // Avoid division by zero
          
          const landedCostPerUnitInPurchase = totalAmount / totalItemsInPurchase;
          const newItemsValue = landedCostPerUnitInPurchase * item.quantity;
          const oldStockValue = (product.purchasePrice || 0) * (product.quantityInStock);

          const newTotalStock = product.quantityInStock + item.quantity;
          if (newTotalStock === 0) return; // Avoid division by zero

          const newAveragePurchasePrice = (oldStockValue + newItemsValue) / newTotalStock;

          if (isFinite(newAveragePurchasePrice)) {
            transaction.update(productRef, { purchasePrice: newAveragePurchasePrice });
          }
      };

      if (isNowReceived && !wasReceived) { // Transition to "Received"
          for (const item of items) {
              const product = allProducts.find(p => p.id === item.productId);
              if(product) {
                handleStockUpdate(item, 'add');
                handlePriceUpdate(item, product);
              }
          }
      } else if (!isNowReceived && wasReceived) { // Reverting from "Received"
          for (const item of originalPurchase.items) {
              handleStockUpdate(item, 'subtract');
              // Note: Reverting price is complex. We will not adjust the price on cancellation
              // to avoid historical data inaccuracies. The price will be re-averaged on the next reception.
          }
      }
    });


    revalidatePath('/purchases');
    revalidatePath('/products');
    revalidatePath('/');
    return {};
  } catch (error) {
    console.error('Failed to update purchase:', error);
    const message = error instanceof Error ? error.message : 'Erreur DB: Impossible de mettre à jour l\'achat.';
    return { message };
  }
}

export async function cancelPurchase(id: string) {
  const session = await getSession();
  if (session?.role !== 'Admin' && session?.role !== 'SuperAdmin') {
    return { message: "Action non autorisée." };
  }

  try {
    const purchaseToCancel = await getPurchaseById(id);
    if (!purchaseToCancel) {
      throw new Error("Achat non trouvé pour l'annulation.");
    }
    
    if (purchaseToCancel.status === 'Received') {
      const products = await getProducts();
      for (const item of purchaseToCancel.items) {
        const product = products.find(p => p.id === item.productId);
        if (product) {
          const newStock = product.quantityInStock - item.quantity;
          await updateProduct(item.productId, { quantityInStock: newStock });
        }
      }
    }
    
    await updatePurchaseInDB(id, { status: 'Cancelled' });

    revalidatePath('/purchases');
    revalidatePath('/products');
    revalidatePath('/');
    return { success: true };
  } catch (error) {
    console.error("Échec de l'annulation de l'achat:", error);
    const message = error instanceof Error ? error.message : "Erreur DB: Impossible d'annuler l'achat.";
    return { success: false, message };
  }
}
