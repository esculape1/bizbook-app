
'use server';

import { z } from 'zod';
import {
  addPurchase,
  getSuppliers,
  getProducts,
  updatePurchase as updatePurchaseInDB,
  getPurchaseById,
  updateProduct,
} from '@/lib/data';
import { revalidatePath } from 'next/cache';
import type { PurchaseItem, Purchase, Product } from '@/lib/types';
import { getSession } from '@/lib/session';

const purchaseItemSchema = z.object({
  productId: z.string().min(1, "Produit requis"),
  productName: z.string(),
  reference: z.string(),
  quantity: z.coerce.number().min(1, "Qté > 0"),
});

const purchaseSchema = z.object({
  supplierId: z.string().min(1, "Fournisseur requis"),
  date: z.date({ required_error: "Date requise" }),
  items: z.array(purchaseItemSchema).min(1, "Ajoutez au moins un produit."),
  premierVersement: z.coerce.number().min(0).default(0),
  deuxiemeVersement: z.coerce.number().min(0).default(0),
  transportCost: z.coerce.number().min(0).default(0),
  otherFees: z.coerce.number().min(0).default(0),
});

const updatePurchaseSchema = purchaseSchema.extend({
  status: z.enum(['Pending', 'Received', 'Cancelled']),
});

export async function createPurchase(formData: unknown) {
  const session = await getSession();
  if (session?.role !== 'Admin') {
    return { message: "Action non autorisée." };
  }

  const validatedFields = purchaseSchema.safeParse(formData);
  if (!validatedFields.success) {
    return { message: 'Champs invalides. Impossible de créer l\'achat.' };
  }

  try {
    const { supplierId, date, items, transportCost, otherFees, premierVersement, deuxiemeVersement } = validatedFields.data;
    
    const suppliers = await getSuppliers();
    const products = await getProducts();

    const supplier = suppliers.find(s => s.id === supplierId);
    if (!supplier) {
      return { message: 'Fournisseur non trouvé.' };
    }
    
    const purchaseItems: PurchaseItem[] = items.map(item => {
      const product = products.find(p => p.id === item.productId);
      if (!product) throw new Error(`Produit non trouvé: ${item.productId}`);
      return {
        productId: item.productId,
        productName: product.name,
        reference: product.reference,
        quantity: item.quantity,
      };
    });

    const totalAmount = premierVersement + deuxiemeVersement + transportCost + otherFees;

    const newPurchaseData: Omit<Purchase, 'id'> = {
        purchaseNumber: '', // Will be generated by addPurchase
        supplierId,
        supplierName: supplier.name,
        date: date.toISOString(),
        items: purchaseItems,
        premierVersement,
        deuxiemeVersement,
        transportCost,
        otherFees,
        totalAmount,
        status: 'Pending',
    };
    
    await addPurchase(newPurchaseData);

    revalidatePath('/purchases');
    revalidatePath('/products');
    return {};
  } catch (error) {
    console.error('Failed to create purchase:', error);
    const message = error instanceof Error ? error.message : 'Erreur DB: Impossible de créer l\'achat.';
    return { message };
  }
}

export async function updatePurchase(id: string, purchaseNumber: string, formData: unknown) {
  const session = await getSession();
  if (session?.role !== 'Admin') {
    return { message: "Action non autorisée." };
  }

  const validatedFields = updatePurchaseSchema.safeParse(formData);

  if (!validatedFields.success) {
    console.log(validatedFields.error.flatten().fieldErrors);
    return { message: 'Champs invalides. Impossible de mettre à jour l\'achat.' };
  }

  try {
    const { supplierId, date, items, status, premierVersement, deuxiemeVersement, transportCost, otherFees } = validatedFields.data;
    
    const [originalPurchase, suppliers, allProducts] = await Promise.all([
      getPurchaseById(id),
      getSuppliers(),
      getProducts()
    ]);
    
    if (!originalPurchase) {
      return { message: 'Achat original non trouvé.' };
    }

    const supplier = suppliers.find(c => c.id === supplierId);
    if (!supplier) {
      return { message: 'Fournisseur non trouvé.' };
    }

    const wasReceived = originalPurchase.status === 'Received';
    const isNowReceived = status === 'Received';
    
    const stockUpdates: { [productId: string]: number } = {};
    
    // 1. Determine stock QUANTITY changes
    if (wasReceived) {
      for (const item of originalPurchase.items) {
        stockUpdates[item.productId] = (stockUpdates[item.productId] || 0) - item.quantity;
      }
    }
    if (isNowReceived) {
      for (const item of items) {
        stockUpdates[item.productId] = (stockUpdates[item.productId] || 0) + item.quantity;
      }
    }

    // 2. Determine PRICE updates (only if becoming "Received")
    let landedCostPerUnit = 0;
    if (isNowReceived) {
      const totalAmount = premierVersement + deuxiemeVersement + transportCost + otherFees;
      const totalQuantity = items.reduce((sum, i) => sum + i.quantity, 0);
      landedCostPerUnit = totalQuantity > 0 ? totalAmount / totalQuantity : 0;
    }

    // 3. Apply updates to products in a batch
    const productUpdatePromises: Promise<void>[] = [];
    const allProductIds = new Set(Object.keys(stockUpdates));

    for (const productId of allProductIds) {
      const product = allProducts.find(p => p.id === productId);
      if (product) {
        const updatePayload: Partial<Omit<Product, 'id'>> = {};
        
        // Update stock quantity
        if (stockUpdates[productId] !== undefined) {
          updatePayload.quantityInStock = product.quantityInStock + stockUpdates[productId];
        }

        // Update purchase price if the purchase is being received
        if (isNowReceived) {
          updatePayload.purchasePrice = landedCostPerUnit;
        }

        if (Object.keys(updatePayload).length > 0) {
          productUpdatePromises.push(updateProduct(productId, updatePayload));
        }
      }
    }
    await Promise.all(productUpdatePromises);


    // 4. Update the Purchase document itself
    const purchaseItems: PurchaseItem[] = items.map(item => {
      const product = allProducts.find(p => p.id === item.productId);
      if (!product) throw new Error(`Produit non trouvé: ${item.productId}`);
      return {
        productId: item.productId,
        productName: product.name,
        reference: product.reference,
        quantity: item.quantity,
      };
    });
    const totalAmount = premierVersement + deuxiemeVersement + transportCost + otherFees;

    const purchaseData: Omit<Purchase, 'id'> = {
      purchaseNumber,
      supplierId,
      supplierName: supplier.name,
      date: date.toISOString(),
      items: purchaseItems,
      premierVersement,
      deuxiemeVersement,
      transportCost,
      otherFees,
      totalAmount,
      status,
    };
    await updatePurchaseInDB(id, purchaseData);

    revalidatePath('/purchases');
    revalidatePath('/products');
    revalidatePath('/');
    return {};
  } catch (error) {
    console.error('Failed to update purchase:', error);
    const message = error instanceof Error ? error.message : 'Erreur DB: Impossible de mettre à jour l\'achat.';
    return { message };
  }
}

export async function cancelPurchase(id: string) {
  const session = await getSession();
  if (session?.role !== 'Admin') {
    return { message: "Action non autorisée." };
  }

  try {
    const purchaseToCancel = await getPurchaseById(id);
    if (!purchaseToCancel) {
      throw new Error("Achat non trouvé pour l'annulation.");
    }
    
    if (purchaseToCancel.status === 'Received') {
      const products = await getProducts();
      for (const item of purchaseToCancel.items) {
        const product = products.find(p => p.id === item.productId);
        if (product) {
          const newStock = product.quantityInStock - item.quantity;
          await updateProduct(item.productId, { quantityInStock: newStock });
        }
      }
    }
    
    await updatePurchaseInDB(id, { status: 'Cancelled' });

    revalidatePath('/purchases');
    revalidatePath('/products');
    revalidatePath('/');
    return { success: true };
  } catch (error) {
    console.error("Échec de l'annulation de l'achat:", error);
    const message = error instanceof Error ? error.message : "Erreur DB: Impossible d'annuler l'achat.";
    return { success: false, message };
  }
}
